// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float> fbm;
RWStructuredBuffer<int> minMax;

//Noise Settings
int octaves;
float persistance;
float lacunarity;

//Map Settings
int mode;
int size;
float scale;
float majorOffsetX;
float majorOffsetY;
bool normalizeMap;


int floatToIntMult;

//Biome Settings
struct BiomeInfo
{
    float scale;
    int octaves;
    float persistance;
    float lacunarity;
    float2 Vector2offset;
    float2 Vector2majorOffset;
};

StructuredBuffer<BiomeInfo> biomeInfo;
StructuredBuffer<float> weights;

StructuredBuffer<float2> normalOffsets;
StructuredBuffer<float2> mountainOffsets;
StructuredBuffer<float2> plainOffsets;


float3 mod289(float3 x)
{
	return x - floor(x / 289.0) * 289.0;
}

float2 mod289(float2 x)
{
	return x - floor(x / 289.0) * 289.0;
}

float3 permute(float3 x)
{
	return mod289((x * 34.0 + 1.0) * x);
}

float3 taylorInvSqrt(float3 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float2 v)
{
	float4 C = float4(0.211324865405187f, // (3.0-math.sqrt(3.0))/6.0
                    0.366025403784439f, // 0.5*(math.sqrt(3.0)-1.0)
                    -0.577350269189626f, // -1.0 + 2.0 * C.x
                    0.024390243902439f); // 1.0 / 41.0
    // First corner
	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

    // Other corners
	float2 i1;
    //i1.x = math.step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? float2(1.0f, 0.0f) : float2(0.0f, 1.0f);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
	float4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

    // Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	float3 p = permute(permute(i.y + float3(0.0f, i1.y, 1.0f)) + i.x + float3(0.0f, i1.x, 1.0f));

	float3 m = max(0.5f - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0f);
	m = m * m;
	m = m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

	float3 x = 2.0f * frac(p * C.www) - 1.0f;
	float3 h = abs(x) - 0.5f;
	float3 ox = floor(x + 0.5f);
	float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversemath.sqrt( a0*a0 + h*h );
	m *= 1.79284291400159f - 0.85373472095314f * (a0 * a0 + h * h);

    // Compute final noise value at P

	float gx = a0.x * x0.x + h.x * x0.y;
	float2 gyz = a0.yz * x12.xz + h.yz * x12.yw;
	float3 g = float3(gx, gyz);

	return 130.0f * dot(m, g);
}

float pnoise(float2 v)
{
	const float4 C = float4(0.211324865405187, // (3.0-sqrt(3.0))/6.0
                             0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
                            -0.577350269189626, // -1.0 + 2.0 * C.x
                             0.024390243902439); // 1.0 / 41.0
    // First corner
	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

    // Other corners
	float2 i1;
	i1.x = step(x0.y, x0.x);
	i1.y = 1.0 - i1.x;

    // x1 = x0 - i1  + 1.0 * C.xx;
    // x2 = x0 - 1.0 + 2.0 * C.xx;
	float2 x1 = x0 + C.xx - i1;
	float2 x2 = x0 + C.zz;

    // Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	float3 p =
      permute(permute(i.y + float3(0.0, i1.y, 1.0))
                    + i.x + float3(0.0, i1.x, 1.0));

	float3 m = max(0.5 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
	m = m * m;
	m = m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
	m *= taylorInvSqrt(a0 * a0 + h * h);

    // Compute final noise value at P
	float3 g;
	g.x = a0.x * x0.x + h.x * x0.y;
	g.y = a0.y * x1.x + h.y * x1.y;
	g.z = a0.z * x2.x + h.z * x2.y;
	return (130.0 * dot(m, g)) * 0.5 + 0.5;
}

float Mountains(float value)
{
    value = 1 - 2*abs(value);
    return value;
}
float Plains(float value)
{
    //value = (value / 20);
    return value;
}
float Ocean(float value)
{
    return value-1;
}

float2 CalculateOctaveOffsets(int mode, int i)
{
    if (mode == 1)
    {
        return plainOffsets[i];
        
    }
    else if (mode == 2)
    {
        return mountainOffsets[i];
        
    }
    else
    {
        return normalOffsets[i];
    }
    
 
}
float CalculateFilters(float value, int mode)
{
    if (mode == 1)
    {
        return Plains(value);
    }
    else if (mode == 2)
    {
        return Mountains(value);	
    }
    else if (mode == 3)
    {
        return Ocean(value);
    }
    else
    {
        return value;
    }
}
float FractalBrownianMotion(float x, float y, int mode, int octaves, float persistance, float lacunarity)
{
    float value;
    float amplitude = 1;
    float frequency = 1;
    
    if (octaves < 0)
    {
        octaves = 0;
    }
    

    for (int currentOctave = 0; currentOctave < octaves; currentOctave++)
    {
        float2 offset = CalculateOctaveOffsets(mode, currentOctave);
        float sampleX = x * frequency + offset.x;
        float sampleY = y * frequency + offset.y;
        
        float2 v = float2(sampleX, sampleY);
        
        float perlinValue = snoise(v);
        perlinValue = CalculateFilters(perlinValue, mode)*amplitude;
        value += perlinValue;
        
        amplitude *= persistance;
        frequency *= lacunarity;
    }
    return value;
};

float SimpleBiomeInterpolation(float a, float b, float weight)
{
    return (1 - weight)*a + b * weight;
}



[numthreads(1024,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
  
	float halfSize = size / 2;
	int Xindex = id.x % size;
	int Yindex = id.x / size;

	float x = (Xindex - halfSize + majorOffsetX);
	float y = (Yindex - halfSize + majorOffsetY);
    float value;
    
	if (mode == 0)
	{
        value = FractalBrownianMotion(x/scale, y/scale, 0, octaves, persistance, lacunarity);
	}
	else
	{
		float plainsValue = 0;
		float mountainValue = 0;
        float oceanValue = 0;
		
		for (int b = 0; b < 5; b++)
		{
            //Modes//
            //0 = normal, 1 = plains, 2 = mountains, 3 = mesa, 4 = Desert, 5 = hills
            BiomeInfo biome = biomeInfo[b];
            if (b == 0)
            {
                plainsValue = FractalBrownianMotion(x/biome.scale, y/biome.scale, 1, biome.octaves, biome.persistance, biome.lacunarity);
            }
            else if (b == 1)
            {
                mountainValue = FractalBrownianMotion(x/biome.scale, y/biome.scale, 2, biome.octaves, biome.persistance, biome.lacunarity);
            }
            else if (b == 2)
            {
                oceanValue = FractalBrownianMotion(x / biome.scale, y / biome.scale, 3, biome.octaves, biome.persistance, biome.lacunarity);;
            }
        }
        if (mode == -1)
        {
            value = SimpleBiomeInterpolation(mountainValue, plainsValue, weights[id.x]);
        }
        else if (mode == 1)
        {
            value = plainsValue;
            
        }
        else if (mode == 2)
        {
            value = mountainValue;
        }
    }
    
    fbm[id.x] = value;
		
	value = int(fbm[id.x] * floatToIntMult);
	InterlockedMin(minMax[0], value);
	InterlockedMax(minMax[1], value);
}



